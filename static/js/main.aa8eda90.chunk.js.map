{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["getReports","a","fetch","rsp","json","reports","reduce","accum","fortio","JSON","parse","Labels","run","kind","name","push","proxy","baseline","SvgStyled","styled","svg","LatencyHeatmap","labeler","maxLatency","maxRequests","withTopAxis","ref","useCallback","element","length","width","getBoundingClientRect","height","x","d3","domain","rangeRound","y","map","attr","boxColor","Math","pow","barColor","offset","append","call","g","tickSize","tickFormat","n","valueOf","selectAll","remove","tickSizeOuter","row","r","data","join","DurationHistogram","Data","d","Start","End","bandwidth","Count","text","Percentiles","p","Value","Percentile","LatencyBars","report","buckets","prior","bucket","toBuckets","compareReportWithinRun","b","App","useState","state","setState","useEffect","then","concat","Max","Fragment","CssBaseline","Container","maxWidth","Grid","container","spacing","item","sm","xl","key","Paper","elevation","direction","alignItems","Typography","variant","Array","from","group","values","flatMap","byRun","sort","justify","Hidden","only","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa8eda90.chunk.js","sourcesContent":["import * as d3 from \"d3\";\nimport { group } from \"d3-array\"\nimport React, { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { CssBaseline, Container, Grid, Hidden, Paper, Typography } from \"@material-ui/core\";\n\nimport * as Fortio from \"./fortio\";\n\ntype Kind = \"baseline\" | \"proxy\";\n\ninterface Report {\n  run: string;\n  kind: Kind;\n  name: string;\n  fortio: Fortio.Report;\n}\n\ntype LabelReport = (r: Report) => string;\n\ninterface Reports {\n  baseline: Report[];\n  proxy: Report[];\n}\n\nconst getReports = async () => {\n  const rsp = await fetch(\"/reports.json\");\n  const reports = (await rsp.json()).reduce(\n    (accum: Reports, fortio: Fortio.Report) => {\n      let { run, kind, name } = JSON.parse(fortio.Labels);\n      accum[kind as Kind].push({ kind, name, run, fortio });\n      return accum;\n    },\n    { proxy: [], baseline: [] });\n  return reports;\n}\n\nconst SvgStyled = styled.svg`\n  height: 100%;\n  width: 100%;\n`;\n\nconst rowHeight = 17;\n\ntype Props = {\n  reports: Report[],\n  labeler: LabelReport,\n  maxLatency: number,\n  maxRequests: number,\n  withTopAxis?: boolean,\n};\n\nconst LatencyHeatmap: FunctionComponent<Props> = ({ reports, labeler, maxLatency, maxRequests, withTopAxis }) => {\n    let drawReports = (element: SVGSVGElement) => {\n      if (reports.length === 0) {\n        return;\n      }\n\n      const { width } = element.getBoundingClientRect();\n      const height = rowHeight * reports.length;\n\n      const x = d3\n        .scaleLinear()\n        .domain([0, maxLatency!])\n        .rangeRound([60, width - 15]);\n\n      const y = d3\n        .scaleBand()\n        .domain(reports.map(labeler))\n        .rangeRound([0, height]);\n\n      const svg = d3\n        .select(element)\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", `0 0 ${width} ${height + (withTopAxis ? rowHeight : 0)}`);\n\n      const boxColor = d3\n        .scaleSequential(d3.interpolateYlOrRd)\n        .domain([0, Math.pow(maxRequests!, 0.5)]);\n      const barColor = d3\n        .scaleOrdinal(d3.schemeYlOrRd[5])\n        .domain([\"50\", \"75\", \"90\", \"99\", \"99.9\"]);\n\n      let offset = 0;\n      if (withTopAxis) {\n        svg.append(\"g\").call(g =>\n          g\n            .attr(\"transform\", `translate(0,${rowHeight})`)\n            .call(\n              d3\n                .axisTop(x)\n                .tickSize(rowHeight / 3)\n                .tickFormat(n => `${n.valueOf() * 1000}ms`)\n            )\n            .call(g => g.selectAll(\".domain\").remove())\n        );\n        offset = rowHeight;\n      }\n\n      svg.append(\"g\").call(g =>\n        g\n          .attr(\"transform\", `translate(60,${offset})`)\n          .call(d3.axisLeft(y).tickSizeOuter(0))\n          .call(g => g.selectAll(\".domain\").remove())\n      );\n\n      const row = svg\n        .append(\"g\")\n        .attr(\"transform\", r => `translate(0,${offset})`)\n        .selectAll(\"g\")\n        .data(reports)\n        .join(\"g\")\n        .attr(\"transform\", r => `translate(0,${y(labeler(r))})`);\n\n      row\n        .append(\"g\")\n        .selectAll(\"rect\")\n        .data(({ fortio }) => fortio.DurationHistogram.Data)\n        .join(\"rect\")\n        .attr(\"x\", d => x(d.Start) + 1)\n        .attr(\"width\", d => x(d.End) - x(d.Start))\n        .attr(\"height\", y.bandwidth())\n        .attr(\"fill\", d => boxColor(Math.pow(d.Count, 0.5)))\n        .append(\"title\")\n        .text(d => `${d.Count} reqs [${d.Start * 1000}ms..${d.End * 1000}ms)`);\n\n      row\n        .append(\"g\")\n        .selectAll(\"rect\")\n        .data(({ fortio }) => fortio.DurationHistogram.Percentiles)\n        .join(\"rect\")\n        .attr(\"x\", p => x(p.Value))\n        .attr(\"y\", y.bandwidth() / 3)\n        .attr(\"width\", 2)\n        .attr(\"height\", y.bandwidth() / 3)\n        .attr(\"fill\", p => barColor(`${p.Percentile}`))\n        .append(\"title\")\n        .text(p => `${p.Percentile} percentile ${p.Value * 1000}ms`);\n    };\n\n    return <SvgStyled ref={useCallback(drawReports, [reports])} />;\n  };\n\n\nconst LatencyBars: FunctionComponent<Props> = ({ reports, labeler, maxLatency, maxRequests, withTopAxis }) => {\n    let drawReports = (element: SVGSVGElement) => {\n      if (reports.length === 0) {\n        return;\n      }\n\n      interface Bucket {\n        prior: number;\n        bucket: Fortio.DurationHistogramBucket;\n      }\n      function toBuckets({ fortio }: Report): Bucket[] {\n        let buckets = [];\n        let prior = 0;\n        for (let bucket of fortio.DurationHistogram.Data) {\n          buckets.push({ prior, bucket });\n          prior += bucket.Count;\n        }\n        return buckets;\n      }\n\n      const { width } = element.getBoundingClientRect();\n      const height = rowHeight * reports.length;\n\n      const x = d3\n        .scaleLinear()\n        .domain([0, maxRequests!])\n        .rangeRound([60, width - 15]);\n\n      const y = d3\n        .scaleBand()\n        .domain(reports.map(labeler))\n        .rangeRound([0, height]);\n\n      const svg = d3\n        .select(element)\n        //.attr('width', width)\n        //.attr('height', margin.top + margin.bottom + reports.length * rowHeight);\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n        .attr(\"viewBox\", `0 0 ${width} ${height + (withTopAxis ? rowHeight : 0)}`);\n\n      const boxColor = d3\n        .scaleSequential(d3.interpolateYlGnBu)\n        .domain([0, Math.pow(maxLatency!, 0.5)]);\n\n      let offset = 0;\n      if (withTopAxis) {\n        svg.append(\"g\").call(g =>\n          g\n            .attr(\"transform\", `translate(0,${rowHeight})`)\n            .call(\n              d3\n                .axisTop(x)\n                .tickSize(rowHeight / 3)\n                .tickFormat(n => `${n.valueOf() / 1000}K`)\n            )\n            .call(g => g.selectAll(\".domain\").remove())\n        );\n        offset = rowHeight;\n      }\n\n      svg.append(\"g\").call(g =>\n        g\n          .attr(\"transform\", `translate(60,${offset})`)\n          .call(d3.axisLeft(y).tickSizeOuter(0))\n        .call(g => g.selectAll(\".domain\").remove())\n      );\n\n      const row = svg\n        .append(\"g\")\n        .attr(\"transform\", r => `translate(0,${offset})`)\n        .selectAll(\"g\")\n        .data(reports)\n        .join(\"g\")\n        .attr(\"transform\", r => `translate(0,${y(labeler(r))})`);\n\n      row\n        .append(\"g\")\n        .selectAll(\"rect\")\n        .data(report => toBuckets(report))\n        .join(\"rect\")\n        .attr(\"x\", ({ prior }) => x(prior) + 1)\n        .attr(\"width\", ({ prior, bucket }) => x(prior + bucket.Count) - x(prior))\n        .attr(\"height\", y.bandwidth())\n        .attr(\"fill\", ({ bucket }) => boxColor(Math.pow(bucket.End, 0.5)))\n        .append(\"title\")\n        .text(({ prior, bucket }) => `${prior + bucket.Count} reqs <${bucket.End * 1000}ms`);\n    };\n\n    return <SvgStyled ref={useCallback(drawReports, [reports])} />;\n  };\n\nconst compareReportWithinRun = (a: Report, b: Report) => {\n  if (a.kind !== b.kind) {\n    if (a.kind === \"baseline\") {\n      return -1;\n    }\n\n    // b is baseline\n    return 1;\n  }\n\n  if (a.name === b.name) {\n    return 0;\n  }\n\n  if (a.name === 'baseline' || a.name < b.name) {\n    return -1;\n  }\n\n  // b.name === 'baseline' || a.name > b.name\n  return 1;\n};\n\nconst App: FunctionComponent = () => {\n  type State = { maxLatency: number, maxRequests: number, reports: Reports };\n  const [state, setState] = useState<State>({ maxLatency: 0, maxRequests: 0, reports: {baseline: [], proxy: []} });\n\n  useEffect(() => {\n    getReports().then((reports: Reports) => {\n      const maxLatency = d3.max(\n        reports.baseline.concat(reports.proxy),\n        ({ run, kind, name, fortio }) => {\n          return fortio.DurationHistogram.Max;\n        }\n      )!;\n      const maxRequests = d3.max(\n        reports.baseline.concat(reports.proxy),\n        ({ fortio }) =>  fortio.DurationHistogram.Count,\n      )!;\n\n      const s = { maxLatency, maxRequests, reports };\n      setState(s);\n    });\n  }, []);\n\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth='xl'>\n        <Grid container spacing={5}>\n          <Grid item sm={12}>{/* Spacer */}</Grid>\n          <Grid item sm={12} xl={6} key='heat'>\n            <Paper elevation={2}>\n              <Grid container spacing={3} direction='row'>\n                <Grid item sm={12} key={`heat-axis`}>\n                  <Container>\n                    <Paper elevation={2}>\n                      <Grid container spacing={1} alignItems='flex-start'>\n                        <Grid item sm={1}>\n                          <Container>\n                            <Typography variant='caption'>baseline</Typography>\n                          </Container>\n                        </Grid>\n                        <Grid item sm={11}>\n                          <LatencyHeatmap\n                              reports={state.reports.baseline}\n                              labeler={({ name }) => `${name}`}\n                              maxLatency={state.maxLatency}\n                              maxRequests={state.maxRequests}\n                              withTopAxis\n                            />\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  </Container>\n                </Grid>\n                {Array.from(group(state.reports.proxy, r => r.run).values()).flatMap(byRun => {\n                  const reports = byRun.sort(compareReportWithinRun);\n                  const run = reports[0].run;\n                  return (\n                    <Grid item sm={12} key={`${run}-heat`}>\n                      <Container>\n                        <Paper elevation={2}>\n                          <Grid\n                            container\n                            spacing={1}\n                            justify='flex-start'\n                            alignItems='flex-start'\n                          >\n                            <Grid item sm={1}>\n                              <Container>\n                                <Typography variant='caption'>{run}</Typography>\n                              </Container>\n                            </Grid>\n                            <Grid item sm={11}>\n                              <LatencyHeatmap\n                                  reports={reports}\n                                  labeler={({ name }) => `${name}`}\n                                  maxLatency={state.maxLatency}\n                                  maxRequests={state.maxRequests}\n                                />\n                            </Grid>\n                          </Grid>\n                        </Paper>\n                      </Container>\n                    </Grid>\n                  );\n                })}\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid item sm={12} xl={6} key='bars'>\n            <Paper elevation={2}>\n              <Grid container spacing={3} direction='row'>\n                <Grid item sm={12} key={`bars-axis`}>\n                  <Container>\n                    <Paper elevation={2}>\n                      <Grid container spacing={1} alignItems='flex-start'>\n                        <Hidden only='xl'>\n                          <Grid item sm={1}>\n                            <Container>\n                              <Typography variant='caption'>baseline</Typography>\n                            </Container>\n                          </Grid>\n                        </Hidden>\n                        <Grid item sm={11} xl={12}>\n                          <LatencyBars\n                              reports={state.reports.baseline}\n                              labeler={({ name }) => `${name}`}\n                              maxLatency={state.maxLatency}\n                              maxRequests={state.maxRequests}\n                              withTopAxis\n                            />\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  </Container>\n                </Grid>\n                {Array.from(group(state.reports.proxy, r => r.run).values()).flatMap(byRun => {\n                  const reports = byRun.sort(compareReportWithinRun);\n                  const run = reports[0].run;\n                  return (\n                    <Grid item sm={12} key={`${run}-bars`}>\n                      <Container>\n                        <Paper elevation={2}>\n                          <Grid\n                            container\n                            key={`${run}-bars`}\n                            sm={12}\n                            spacing={1}\n                            justify='flex-start'\n                            alignItems='flex-start'\n                          >\n                            <Hidden only='xl'>\n                              <Grid item sm={1}>\n                                <Container>\n                                  <Typography variant='caption'>{run}</Typography>\n                                </Container>\n                              </Grid>\n                            </Hidden>\n                            <Grid item sm={11} xl={12}>\n                              <LatencyBars\n                                  reports={reports}\n                                  labeler={({ name }) => `${name}`}\n                                  maxLatency={state.maxLatency}\n                                  maxRequests={state.maxRequests}\n                                />\n                            </Grid>\n                          </Grid>\n                        </Paper>\n                      </Container>\n                    </Grid>\n                  );\n                })}\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}