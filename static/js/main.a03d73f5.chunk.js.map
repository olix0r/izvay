{"version":3,"sources":["ReportGrid.tsx","RequestsByLatency.tsx","LatencyByRequests.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ReportGrid","reports","dimensions","view","Grid","item","sm","Paper","elevation","container","spacing","direction","key","Container","Typography","TopAxis","maxLatency","maxRequests","rowHeight","alignItems","baseline","map","report","Fragment","name","variant","Viz","Array","from","group","proxy","r","run","values","flatMap","byRun","sort","compareReportWithinRun","a","b","kind","SvgStyled","styled","svg","fillGaps","original","filled","bucket","length","End","Start","push","Count","Percent","View","ref","React","useCallback","element","width","getBoundingClientRect","d3","attr","x","domain","rangeRound","append","call","g","tickSize","tickFormat","n","valueOf","undefined","scale","latency","Math","pow","boxColor","barColor","row","selectAll","data","join","fortio","DurationHistogram","Data","d","text","Percentiles","p","Value","Percentile","toBuckets","buckets","prior","getReports","fetch","then","rsp","json","reduce","accum","JSON","parse","Labels","App","useState","state","setState","useEffect","concat","Max","CssBaseline","maxWidth","xl","RequestsByLatency","LatencyByRequests","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a03d73f5.chunk.js","sourcesContent":["import { group } from \"d3-array\"\nimport React from \"react\";\nimport { Container, Grid, Paper, Typography } from \"@material-ui/core\";\n\nimport { Report, Reports } from './Reports';\n\nexport type Dimensions = {\n  maxLatency: number,\n  maxRequests: number,\n  rowHeight: number,\n};\n\nexport type TopAxis = React.FC<Dimensions>;\nexport type Viz = React.FC<{ report: Report, dimensions: Dimensions }>;\nexport type View = { TopAxis: TopAxis, Viz: Viz };\n\nexport type Props = {\n  dimensions: Dimensions,\n  reports: Reports,\n  view: View,\n};\n\nconst ReportGrid: React.FC<Props> = ({ reports, dimensions, view }) => {\n  return (\n    <Grid item sm={12}>\n      <Paper elevation={2}>\n        <Grid container spacing={3} direction='row'>\n          <Grid item sm={12} key='baseline'>\n            <Container>\n              <Paper elevation={2}>\n                <Grid container direction='column'>\n                  <Grid container item sm={12}>\n                    <Grid item sm={2} key='run'>\n                      <Container>\n                        <Typography>baseline</Typography>\n                      </Container>\n                    </Grid>\n                    <Grid item sm={10} key='top-axis'>\n                      <view.TopAxis\n                        maxLatency={dimensions.maxLatency}\n                        maxRequests={dimensions.maxRequests}\n                        rowHeight={dimensions.rowHeight}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid container item sm={12} alignItems='flex-start'>\n                    {reports.baseline.map((report) => {\n                      return (\n                        <React.Fragment key={report.name}>\n                          <Grid item container sm={2} key='run' direction='row'>\n                            <Grid item sm={1}></Grid>\n                            <Grid item sm={11}>\n                              <Container>\n                                <Typography variant='caption'>{report.name}</Typography>\n                              </Container>\n                            </Grid>\n                          </Grid>\n                          <Grid item sm={10}>\n                            <view.Viz report={report} dimensions={dimensions} />\n                          </Grid>\n                        </React.Fragment>\n                      );\n                    })}\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Container>\n          </Grid>\n          {Array.from(group(reports.proxy, r => r.run).values()).flatMap(byRun => {\n            const reports = byRun.sort(compareReportWithinRun);\n            const run = reports[0].run;\n            return (\n              <Grid item sm={12} key={`${run} `}>\n                <Container>\n                  <Paper elevation={2}>\n                    <Grid container direction='column'>\n                      <Grid item sm={12}>\n                        <Container>\n                          <Typography>{run}</Typography>\n                        </Container>\n                      </Grid>\n                      <Grid container item sm={12} alignItems='flex-start' direction='row'>\n                        {reports.map(report => {\n                          return (\n                            <React.Fragment key={report.name}>\n                              <Grid item container sm={2} direction='row'>\n                                <Grid item sm={1}></Grid>\n                                <Grid item sm={11}>\n                                  <Container>\n                                    <Typography variant='caption'>{report.name}</Typography>\n                                  </Container>\n                                </Grid>\n                              </Grid>\n                              <Grid item sm={10}>\n                                <view.Viz report={report} dimensions={dimensions} />\n                              </Grid>\n                            </React.Fragment>\n                          );\n                        })}\n                      </Grid>\n                    </Grid>\n                  </Paper>\n                </Container>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default ReportGrid;\n\nconst compareReportWithinRun = (a: Report, b: Report) => {\n  if (a.kind !== b.kind) {\n    if (a.kind === \"baseline\") {\n      return -1;\n    }\n\n    // b is baseline\n    return 1;\n  }\n\n  if (a.name === b.name) {\n    return 0;\n  }\n\n  if (a.name < b.name) {\n    return -1;\n  }\n\n  // b.kind === 'baseline' || a.name > b.name\n  return 1;\n};\n\n","import * as d3 from \"d3\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport { Bucket } from './fortio';\nimport * as ReportGrid from './ReportGrid';\n\nconst SvgStyled = styled.svg`\n  height: 100%;\n  width: 100%;\n  //background-color: #666;\n`;\n\nexport const TopAxis: ReportGrid.TopAxis = ({ maxLatency, rowHeight }) => {\n    const draw = (element: SVGSVGElement) => {\n        if (element === null || !maxLatency) {\n            return;\n        }\n\n        const { width } = element.getBoundingClientRect();\n        const svg = d3\n            .select(element)\n            //.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"viewBox\", `0 0 ${width} ${rowHeight * 1.5}`);\n\n        const x = d3\n            .scaleLinear()\n            .domain([0, maxLatency!])\n            .rangeRound([15, width - 15]);\n\n        svg.append(\"g\").call(g => {\n            g.attr(\"transform\", `translate(0,${rowHeight * 1.5})`)\n                .call(\n                    d3.axisTop(x)\n                        .tickSize(rowHeight / 2)\n                        .tickFormat(n => `${n.valueOf() * 1000}ms`)\n                )\n        });\n    };\n\n    return <SvgStyled ref={React.useCallback(draw, [maxLatency, rowHeight])} />;\n};\n\nexport const HeatMap: ReportGrid.Viz = ({ report, dimensions }) => {\n    const draw = (element: SVGSVGElement) => {\n        if (report === undefined || element === null) {\n            return;\n        }\n        const { width } = element.getBoundingClientRect();\n\n        const x = d3\n            .scaleLinear()\n            .domain([0, dimensions.maxLatency!])\n            .rangeRound([15, width - 15]);\n\n        const svg = d3\n            .select(element)\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", `0 0 ${width} ${dimensions.rowHeight}`);\n\n        const scale = (latency: number) => Math.pow(latency, 1 / 4);\n        const boxColor = d3\n            .scaleSequential(d3.interpolateGreens)\n            .domain([0, scale(dimensions.maxRequests!)]);\n        const barColor = d3\n            .scaleOrdinal(d3.schemeYlOrRd[5])\n            .domain([\"50\", \"75\", \"90\", \"99\", \"99.9\"]);\n\n        const row = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(0,0)`)\n            .selectAll(\"g\")\n            .data([report])\n            .join(\"g\");\n\n        row\n            .append(\"g\")\n            .selectAll(\"rect\")\n            .data(r => fillGaps(r.fortio.DurationHistogram.Data))\n            .join(\"rect\")\n            .attr(\"x\", d => x(d.Start) + 1)\n            .attr(\"width\", d => x(d.End) - x(d.Start))\n            .attr(\"height\", dimensions.rowHeight)\n            .attr(\"fill\", d => boxColor(scale(d.Count)))\n            .append(\"title\")\n            .text(d => `${d.Count} reqs [${d.Start * 1000}ms..${d.End * 1000}ms)`);\n\n        row\n            .append(\"g\")\n            .selectAll(\"rect\")\n            .data(({ fortio }) => fortio.DurationHistogram.Percentiles)\n            .join(\"rect\")\n            .attr(\"x\", p => x(p.Value))\n            .attr(\"y\", dimensions.rowHeight / 3)\n            .attr(\"height\", dimensions.rowHeight / 3)\n            .attr(\"width\", dimensions.rowHeight / 6)\n            .attr(\"fill\", p => barColor(`${p.Percentile}`))\n            .append(\"title\")\n            .text(p => `${p.Percentile} percentile ${p.Value * 1000}ms`);\n    };\n\n    return <SvgStyled ref={React.useCallback(draw, [report, dimensions])} />;\n};\n\nconst fillGaps = (original: Bucket[]) => {\n    let filled: Bucket[] = [];\n    for (let bucket of original) {\n        // If there's a gap between the prior bucket and this one, insert an empty bucket in the gap.\n        if (filled.length > 0 && filled[filled.length - 1].End < bucket.Start) {\n            filled.push({\n                Start: filled[filled.length - 1].End,\n                End: bucket.Start,\n                Count: 0,\n                Percent: 0,\n            });\n        }\n        filled.push(bucket);\n    }\n    return filled;\n};\n\nexport const View: ReportGrid.View = {\n    TopAxis,\n    Viz: HeatMap,\n};\n\nexport default View;\n","import * as d3 from \"d3\";\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport { Report } from './Reports';\nimport * as ReportGrid from './ReportGrid';\n\nconst SvgStyled = styled.svg`\n  height: 100%;\n  width: 100%;\n  //background-color: #666;\n`;\n\nexport const TopAxis: ReportGrid.TopAxis = ({ maxRequests, rowHeight }) => {\n    const draw = (element: SVGSVGElement) => {\n        if (element === null || !maxRequests) {\n            return;\n        }\n\n        const { width } = element.getBoundingClientRect();\n        const svg = d3\n            .select(element)\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", `0 0 ${width} ${rowHeight * 1.5}`);\n\n        const x = d3\n            .scaleLinear()\n            .domain([0, maxRequests!])\n            .rangeRound([15, width - 15]);\n\n        svg.append(\"g\").call(g =>\n            g\n                .attr(\"transform\", `translate(0,${rowHeight * 1.5})`)\n                .call(\n                    d3\n                        .axisTop(x)\n                        .tickSize(rowHeight / 2)\n                        .tickFormat(n => `${n.valueOf() / 1000}K`)\n                )\n        );\n    };\n\n    return <SvgStyled ref={React.useCallback(draw, [maxRequests, rowHeight])} />;\n};\n\nexport const HeatMap: ReportGrid.Viz = ({ report, dimensions }) => {\n    const draw = (element: SVGSVGElement) => {\n        if (report === undefined || element === null) {\n            return;\n        }\n\n        const { width } = element.getBoundingClientRect();\n\n        const x = d3\n            .scaleLinear()\n            .domain([0, dimensions.maxRequests!])\n            .rangeRound([15, width - 15]);\n\n        const svg = d3\n            .select(element)\n            //.attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"preserveAspectRatio\", \"none\")\n            .attr(\"viewBox\", `0 0 ${width} ${dimensions.rowHeight}`);\n\n        const scale = (latency: number) => Math.pow(latency, 1 / 2);\n        const boxColor = d3\n            .scaleSequential(d3.interpolateBlues)\n            .domain([0, scale(dimensions.maxLatency!)]);\n\n        const row = svg\n            .append(\"g\")\n            .selectAll(\"g\")\n            .data([report])\n            .join(\"g\");\n\n        row\n            .append(\"g\")\n            .selectAll(\"rect\")\n            .data(toBuckets)\n            .join(\"rect\")\n            .attr(\"x\", ({ prior }) => x(prior) + 1)\n            .attr(\"width\", ({ prior, bucket }) => x(prior + bucket.Count) - x(prior))\n            .attr(\"height\", dimensions.rowHeight)\n            .attr(\"fill\", ({ bucket }) => boxColor(scale(bucket.End)))\n            .append(\"title\")\n            .text(({ prior, bucket }) => `${prior + bucket.Count} reqs <${bucket.End * 1000}ms`);\n    };\n\n    return <SvgStyled ref={React.useCallback(draw, [report, dimensions])} />;\n};\n\nconst toBuckets = ({ fortio }: Report) => {\n    let buckets = [];\n    let prior = 0;\n    for (let bucket of fortio.DurationHistogram.Data) {\n        buckets.push({ prior, bucket });\n        prior += bucket.Count;\n    }\n    return buckets;\n}\n\nexport const View: ReportGrid.View = {\n    TopAxis,\n    Viz: HeatMap,\n};\n\nexport default View;\n","import * as d3 from \"d3\";\nimport React from \"react\";\nimport { CssBaseline, Container, Grid, Paper } from \"@material-ui/core\";\n\nimport * as Fortio from \"./fortio\";\nimport { Kind, Report, Reports } from './Reports'\nimport ReportGrid from './ReportGrid'\nimport RequestsByLatency from './RequestsByLatency'\nimport LatencyByRequests from './LatencyByRequests'\n\n// Fetches a list of test results from the server, separating baseline tests from proxy tests.\nconst getReports = async () => {\n  const rsp = await fetch(\"./reports.json\").then(rsp => rsp.json());\n  const reports = rsp.reduce(\n    (accum: Reports, fortio: Fortio.Report) => {\n      let { run, kind, name } = JSON.parse(fortio.Labels);\n      accum[kind as Kind].push({ kind, name, run, fortio });\n      return accum;\n    },\n    { proxy: [], baseline: [] });\n  return reports;\n}\n\nconst App: React.FunctionComponent = () => {\n  interface State { maxLatency: number, maxRequests: number, reports: Reports };\n  const [state, setState] = React.useState<State>({\n    maxLatency: 0,\n    maxRequests: 0,\n    reports: {\n      baseline: [],\n      proxy: []\n    }\n  });\n\n  React.useEffect(() => {\n    getReports().then((reports: Reports) => {\n      const maxLatency = d3.max(\n        reports.baseline.concat(reports.proxy),\n        ({ run, kind, name, fortio }) => {\n          return fortio.DurationHistogram.Max;\n        }\n      )!;\n      const maxRequests = d3.max(\n        reports.baseline.concat(reports.proxy),\n        ({ fortio }) => fortio.DurationHistogram.Count,\n      )!;\n\n      setState({\n        maxLatency,\n        maxRequests,\n        reports\n      });\n    });\n  }, []);\n\n  const rowHeight = 20;\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth='xl'>\n        <Grid container spacing={5}>\n          <Grid item sm={12}>{/* Spacer */}</Grid>\n          <Grid item sm={12} xl={6} key='requests-by-latency'>\n            <Paper elevation={2}>\n              <ReportGrid\n                reports={state.reports}\n                view={RequestsByLatency}\n                dimensions={{\n                  maxLatency: state.maxLatency,\n                  maxRequests: state.maxRequests,\n                  rowHeight: rowHeight,\n                }}\n              />\n            </Paper>\n          </Grid>\n          <Grid item sm={12} xl={6} key='latency-by-requests'>\n            <Paper elevation={2}>\n              <ReportGrid\n                reports={state.reports}\n                view={LatencyByRequests}\n                dimensions={{\n                  maxLatency: state.maxLatency,\n                  maxRequests: state.maxRequests,\n                  rowHeight: rowHeight,\n                }}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}